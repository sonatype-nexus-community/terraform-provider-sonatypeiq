# Terraform Provider release workflow.
name: Release

# This GitHub action creates a release when a tag that matches the pattern
# "v*" (e.g. v0.1.0) is created.
on:
    push:
        tags:
            - 'v*'

# Releases need permissions to read and write the repository contents.
# GitHub considers creating releases and uploading assets as writing contents.
permissions:
    contents: write         # required for goreleaser && semantic-release
    issues: write           # required for semantic-release
    pull-requests: write    # required for semantic-release

env:
    LC_APPLICATION_ID: terraform-provider-sonatyperepo

jobs:
    sonatype:
        name: Sonatype Scan
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5
            - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
              with:
                go-version-file: 'go.mod'
                cache: true
              
            - name: Generate go.list
              run:
                    go list -f '{{define "M"}}{{.Path}} {{.Version}}{{end}}{{with .Module}}{{if not .Main}}{{if .Replace}}{{template "M" .Replace}}{{else}}{{template "M" .}}{{end}}{{end}}{{end}}' -compiled -deps| sort -u > go.list
              
            - name: Sonatype Lifecycle Evaluation
              id: evaluate
              uses: sonatype/actions/evaluate@v1
              with:
                    iq-server-url: ${{ vars.SONATYPE_PLATFORM_URL }}
                    username: ${{ secrets.SONATYPE_LIFECYCLE_USERNAME }}
                    password: ${{ secrets.SONATYPE_LIFECYCLE_PASSWORD }}
                    application-id: ${{ env.LC_APPLICATION_ID }}
                    scan-targets: 'go.list'
                    stage: release

    goreleaser:
        name: Run Goreleaser
        needs: sonatype
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5
              with:
                  # Allow goreleaser to access older tag information.
                  fetch-depth: 0
            - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
              with:
                  go-version-file: 'go.mod'
            - name: Import GPG key
              uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
              id: import_gpg
              with:
                  gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
                  passphrase: ${{ secrets.PASSPHRASE }}
            - name: Run GoReleaser
              uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
              with:
                  args: release --clean
              env:
                  # GitHub sets the GITHUB_TOKEN secret automatically.
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

    # changelog:
    #     name: Generate Changelog
    #     needs: goreleaser
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: Checkout
    #           uses: actions/checkout@v4

    #         - uses: actions/setup-node@v4
    #           with:
    #             node-version: 20

    #         - name: Install Semantic Release Plugins
    #           run:
    #             npm install @semantic-release/changelog -D
    #             npm install @semantic-release/git -D
            
    #         - name: Semantic Release
    #           run: |
    #             npx semantic-release
    #           env:
    #             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


