# Terraform Provider release workflow.
name: Release

# This GitHub action creates a release when a tag that matches the pattern
# "v*" (e.g. v0.1.0) is created.
on:
    push:
        tags:
            - 'v*'

# Releases need permissions to read and write the repository contents.
# GitHub considers creating releases and uploading assets as writing contents.
permissions:
    contents: write

env:
    LC_APPLICATION_ID: terraform-provider-sonatyperepo

jobs:
    sonatype:
        name: Sonatype Scan
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              
            - uses: actions/setup-go@v5
              with:
                go-version-file: 'go.mod'
                cache: true
              
            - name: Generate go.list
              run:
                    go list -f '{{define "M"}}{{.Path}} {{.Version}}{{end}}{{with .Module}}{{if not .Main}}{{if .Replace}}{{template "M" .Replace}}{{else}}{{template "M" .}}{{end}}{{end}}{{end}}' -compiled -deps| sort -u > go.list
              
            - name: Sonatype Lifecycle Evaluation
              id: evaluate
              uses: sonatype/actions/evaluate@v1
              with:
                    iq-server-url: ${{ vars.SONATYPE_PLATFORM_URL }}
                    username: ${{ secrets.SONATYPE_LIFECYCLE_USERNAME }}
                    password: ${{ secrets.SONATYPE_LIFECYCLE_PASSWORD }}
                    application-id: ${{ env.LC_APPLICATION_ID }}
                    scan-targets: 'go.list'
                    stage: release

    goreleaser:
        name: Run Goreleaser
        needs: sonatype
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  # Allow goreleaser to access older tag information.
                  fetch-depth: 0
            - uses: actions/setup-go@v5
              with:
                  go-version-file: 'go.mod'
            - name: Import GPG key
              uses: crazy-max/ghaction-import-gpg@v6
              id: import_gpg
              with:
                  gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
                  passphrase: ${{ secrets.PASSPHRASE }}
            - name: Run GoReleaser
              uses: goreleaser/goreleaser-action@v6
              with:
                  args: release --clean
              env:
                  # GitHub sets the GITHUB_TOKEN secret automatically.
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
